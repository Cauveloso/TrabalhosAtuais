const int sensor1Pin = 2; // sensor da esquerda
const int sensor2Pin = 4; // sensor da direita
const int LED_VERDE = 8; // led verde
const int LED_VERMELHO = 13; // led vermelho
const int LED_AMARELO = 7; // led marrom
int contador = 0; // contador de aviões no aeroporto
int contador_saida = 0;
int cont_ant = 0;
int cont_saida = 0;

int saindo = 0; // contador de aviões na fila de saída
bool atraso_entrada = false; // flag de atraso de entrada
bool atraso_saida = false; // flag de atraso de saída
bool saida_liberada = false; // flag de saída liberada
int passageiros[5] = {0, 0, 0, 0, 0}; // fila de passageiros para cada avião
int aeroporto[5] = {0, 0, 0, 0, 0}; // fila de aviões entrando no aeroporto
int aviao_saindo[5] = {0, 0, 0, 0, 0}; // fila de aviões saindo do aeroporto
char strBuff[50]; // string auxiliar

unsigned long startTime = 0;
unsigned long tempo_atraso = 0;
unsigned long t_saida_atraso = 0;
unsigned long cont_tempo = 0;
unsigned long elapsedTime = 0;
unsigned long elapsedTimeA = 0;
unsigned long totalPassagem = 0;
unsigned long totalAtrasoEntrada = 0;
unsigned long totalAtrasoSaida = 0;
int ledState = 0;

void setup() {
  Serial.begin(9600);
  pinMode(sensor1Pin, INPUT);
  pinMode(sensor2Pin, INPUT);
  pinMode(LED_VERDE, OUTPUT);
  pinMode(LED_VERMELHO, OUTPUT);
  pinMode(LED_AMARELO, OUTPUT);
  digitalWrite(LED_VERDE, LOW);
  digitalWrite(LED_VERMELHO, HIGH);
  digitalWrite(LED_AMARELO, LOW);
  Serial.println("_______");
  Serial.println("AEROPORTO ABERTO!");
  Serial.println("_______");
}

unsigned long atraso(unsigned long start) {
  unsigned long resultado = millis() - start;
  return resultado;
}

void fila_saindo() {
  aeroporto[contador - 1]--;
  cont_ant = contador;
  contador--;
  elapsedTime = millis() - startTime;
  saindo++;
  if (saindo >= 3) {
    if (atraso_saida == false) {
      atraso_saida = true;
      t_saida_atraso = millis();
      digitalWrite(LED_AMARELO, HIGH);
      delay(1000);
      digitalWrite(LED_AMARELO,LOW);
      delay(1000);
      digitalWrite(LED_AMARELO, HIGH);
      delay(1000);
      digitalWrite(LED_AMARELO,LOW);
      delay(1000);
      digitalWrite(LED_AMARELO,HIGH);
      Serial.println("PROBLEMA DE SAIDA!! ATRASO CONTADO");
    }
    saindo--;
  } else {
    atraso_saida = false;
    t_saida_atraso = t_saida_atraso != 0 ? millis() - t_saida_atraso : 0;
    digitalWrite(LED_AMARELO, LOW);
    aviao_saindo[saindo - 1]++;
  }
}

void loop() {
  // AVIÃO CHEGANDO
  if (digitalRead(sensor1Pin) == HIGH) {
    cont_ant = contador;
    contador++;
    cont_saida = contador_saida;
    contador_saida++;
    if (contador > 5) { // se houver mais do que 5 aviões
      if (atraso_entrada == false) { // se não houver atraso
        atraso_entrada = true; // indica atraso de entrada
        tempo_atraso = millis(); // conta tempo de atraso
        digitalWrite(LED_AMARELO, HIGH); // sinaliza
        Serial.println("PROBLEMA DE ENTRADA!! ATRASO CONTADO");
      }
      contador--; // decrementa contador
    } else { // contador <= 5
      atraso_entrada = false;
      tempo_atraso = tempo_atraso != 0 ? millis() - tempo_atraso : 0;
      digitalWrite(LED_AMARELO, LOW); // sinaliza
      sprintf(strBuff, "AVIAO %d CHEGOU!", contador);
      Serial.println("_______");
      Serial.println(strBuff);
      Serial.println("_______");

      if (cont_ant == 0 && contador == 1) { // se foi o primeiro avião
        startTime = millis(); // registra tempo apenas no primeiro avião
        Serial.println("CONTAGEM DE TEMPO INICIADA!");
      }
      aeroporto[contador - 1]++; // adiciona avião no aeroporto
      delay(2000); // 2s de recuperação
    }
  }

  // EMBARQUE
  if (contador > 0) { // se existem aviões no aeroporto
    for (int aviao = 0; aviao < contador; aviao++) { // para todos os aviões no aeroporto
      if (aeroporto[aviao] > 0) {
        passageiros[aviao]++; // embarca 1 passageiro
        delay(500); // tempo de embarque
        if (passageiros[aviao] % 10 == 0) { // de 10 em 10 passageiros
          unsigned long tempo = millis() - startTime;
          sprintf(strBuff, "%d PASSAGEIROS EMBARCARAM NO AVIAO %d (%d s)", passageiros[aviao], aviao + 1, tempo / 1000);
          Serial.println("--------------------------------------");
          Serial.println(strBuff);
          Serial.println("--------------------------------------");
        }
        if (passageiros[aviao] > 50) { // se todos embarcaram
          digitalWrite(LED_VERMELHO, LOW); // apaga led vermelho
          digitalWrite(LED_VERDE, HIGH); // acende led verde
          for (int novo = aviao; novo < contador - 1; novo++) {
            passageiros[novo] = passageiros[novo + 1];
            passageiros[novo + 1] = 0;
          }
          if (contador == 1) passageiros[contador - 1] = 0;
          saida_liberada = true;
          sprintf(strBuff, "AVIAO %d LIBERADO PARA SAIR!", aviao + 1);
          Serial.println("==================================");
          Serial.println(strBuff);
          Serial.println("==================================");
          fila_saindo();
        }
      }
    }
  }

  // AVIÃO SAINDO
  if (digitalRead(sensor2Pin) == HIGH && saida_liberada) {
    if (saindo > 0 && aviao_saindo[saindo - 1] > 0) {
      aviao_saindo[saindo - 1] = 0;
      saindo--;
      unsigned long duracao = atraso_entrada + elapsedTime + t_saida_atraso;
      sprintf(strBuff, "AVIAO %d SAIU EM %d s", saindo + 1, duracao / 1000);
      Serial.println("###############################");
      Serial.println(strBuff);
      Serial.println("###############################");
      if (saindo == 0){
        digitalWrite(LED_VERDE, LOW); // apaga verde
        digitalWrite(LED_VERMELHO, HIGH); // acende vermelho
      }else{
        digitalWrite(LED_VERDE, HIGH);
        delay(2000); // 2s de recuperação
      saida_liberada = true;
      }
      
    }
      if (contador_saida > 0) {
    cont_tempo++;
    totalPassagem += elapsedTime;
    totalAtrasoEntrada += tempo_atraso;
    totalAtrasoSaida += t_saida_atraso;
  }

  if (cont_tempo == contador_saida) {
    Serial.println("_______");
    Serial.print("Media de tempo no aeroporto: ");
    Serial.print(totalPassagem / contador_saida / 1000);
    Serial.println(" segundos");

    Serial.print("Media de atraso de entrada: ");
    Serial.print(totalAtrasoEntrada / contador_saida / 1000);
    Serial.println(" segundos");

    Serial.print("Media de atraso de saida: ");
    Serial.print(totalAtrasoSaida / contador_saida / 1000);
    Serial.println(" segundos");

    Serial.print("Quantidade de avioes que passaram no aeroporto: ");
    Serial.println(contador_saida);
    Serial.println("_______");

  }
  }


}